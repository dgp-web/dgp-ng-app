@use '@angular/material' as mat;
@import '@angular/material/theming';

@mixin dgp-normalize {

    html, body {
        height: 100%;
        width: 100%;
    }

    body {
        margin: 0;
    }

    * {
        box-sizing: border-box;
    }

}

@mixin dgp-list-item-theme($theme) {

    $primary: map-get($theme, primary);
    $accent: map-get($theme, accent);

    .dgp-bg--primary {
        background: mat.get-color-from-palette($primary, 300) !important;
    }

    .dgp-bg--accent {
        background: mat.get-color-from-palette($accent, 300) !important;
    }

    .dgp-list-item.--selected {
        border-left-color: mat.get-color-from-palette($primary, 300);
        border-left-width: 4px;
        border-left-style: solid;
    }

    .dgp-list-item.--not-clickable {
        pointer-events: none;
    }

    .dgp-list-item--selected {
        border-left-color: mat.get-color-from-palette($primary, 300);
        border-left-width: 4px;
        border-left-style: solid;
        pointer-events: none;

        &:hover {
            background-color: mat.get-color-from-palette($accent, 300);
        }
    }

}

@mixin dgp-ng-app-theme($primary, $accent, $warn: mat.define-palette(mat.$red-palette)) {

    @include dgp-normalize();

    $app-theme: mat.define-light-theme($primary, $accent, $warn);
    $app-dark-theme: mat.define-dark-theme($primary, $accent, $warn);

    @include mat.all-component-themes($app-theme);
    @include dgp-list-item-theme($app-theme);

    .dark-theme {
        @include mat.all-component-themes($app-dark-theme);
        @include dgp-list-item-theme($app-dark-theme);
    }

    .dgp-bg--primary {
        background: mat.get-color-from-palette($primary) !important;
    }

    .dgp-bg--accent {
        background: mat.get-color-from-palette($accent) !important;
    }

    .dgp-bg--warn {
        background: mat.get-color-from-palette($warn) !important;
    }

    .dgp-cl--primary {
        color: mat.get-color-from-palette($primary) !important;
    }

    .dgp-cl--accent {
        color: mat.get-color-from-palette($accent) !important;
    }

    .dgp-cl--warn {
        color: mat.get-color-from-palette($warn) !important;
    }

    mat-dialog-actions {
        display: flex;
        justify-content: flex-end;
    }

    .page-menu-drawer-container {
        .mat-drawer-inner-container {
            display: flex;
            flex-direction: column;
        }
    }

    .hamburger-menu-drawer-content > *:not(router-outlet) {
        display: flex;
        flex-direction: column;
        height: 100%;
        flex-grow: 1;
        overflow: auto;
    }

    .dgp-action-context.--selected {
        outline: 1px dashed mat.get-color-from-palette($accent, 300);
    }

    .dgp-bg--accent {
        background: mat.get-color-from-palette($accent, 100) !important;
    }

    .mat-icon--small {
        height: 20px !important;
        width: 20px !important;
        font-size: 20px !important;
    }

    dgp-inspector-item {
        .mat-list-item-content {
            align-items: flex-start;
        }
    }

}

.dgp-file-manager-overlay--maximized {
    width: 100% !important;
    height: 100% !important;
    max-width: 100% !important;
    max-height: 100% !important;
}


.dgp-dynamic-virtual-scroll-viewport {
    height: 100%;
    width: 100%;
    display: flex;
    flex-grow: 1;
}

.--with-flex-wrap-panel {
    .cdk-virtual-scroll-content-wrapper {
        display: flex !important;
        flex-wrap: wrap;
    }
}


dgp-inspector-item {
    mat-list-item {
        .mat-list-item-content {
            flex-grow: 1 !important;
        }
    }
}

dgp-inspector-section {
    .mat-subheader:first-child {
        margin-top: 0 !important;
    }
}

.dgp-routing-overlay-dialog-panel {
    mat-dialog-container {
        background: transparent !important;
        box-shadow: none !important;
    }
}

.dgp-routing-overlay-backdrop {
    background: #00000022;
}
